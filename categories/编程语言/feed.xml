<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程语言 on 悟剑阁</title>
    <link>http://luosha865.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 编程语言 on 悟剑阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Sat, 30 Jun 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://luosha865.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>R语言系列—-区间估计</title>
      <link>http://luosha865.github.io/archives/11</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://luosha865.github.io/archives/11</guid>
      <description>&lt;p&gt;这一篇讲的是区间估计…..因为这不是一个关于统计学的系列，所以对文中出现的公式不会给予任何证明…..就是这样。&lt;/p&gt;

&lt;p&gt;就从一个最简单的正态分布的方差已知时，求均值的置信区间开始吧。&lt;/p&gt;

&lt;p&gt;书上的公式告诉我们这个区间是 $$\overline{x}\pm(\sigma/\sqrt{n})z_{(1-\sigma/2)}$$ ,其中Z&lt;sub&gt;p&lt;/sub&gt;表示的是正态分布N(0,1)下侧的p分位数。&lt;/p&gt;

&lt;p&gt;我们用R来实现求得这一结果的过程。下面设x里存储了给出的样本，sigma表示已知的方差，n表示样本的个数， alpha则是(1-置信水平)&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true&#34;&gt;mean&amp;lt;-mean(x)
ans&amp;lt;-c(mean-sigma*qnorm(1-alpha / 2)/sqrt(n) , mean+sigma*qnorm(1-alpha / 2)/sqrt(n))
&lt;/pre&gt;

&lt;p&gt;这样,ans就存储了要求的置信区间。&lt;/p&gt;

&lt;p&gt;来解释一下吧，先用mean(x)求出样本的平均值，然后用qnorm(1-alpha / 2)求出Z&lt;sub&gt;1-a/2&lt;/sub&gt;，（还记得么？前缀q是分位数函数，）剩下的就是套公式的加减法了。&lt;/p&gt;

&lt;p&gt;这里的qnorm(1-alpha / 2)其实省略了很多参数，完整一些的写法是&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true&#34;&gt;qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)&lt;/pre&gt;

&lt;p&gt;第一个参数就不用解释了，第二,三个参数mean=0,sd=1，表示这是一个标准正态分布(不同于前面，这里增加了mean=和sd=，这种做法的好处是可以改变参数的顺序，但是结果是一样的)，最后一个参数lower.tail这个参数的意思就比较有意思了，官方解释如下：&lt;/p&gt;

&lt;p&gt;if TRUE (default), probabilities are $P[X &amp;lt;= x]$, otherwise, $P[X &amp;gt; x]$.&lt;/p&gt;

&lt;p&gt;明白了么?等于真的话，得出的就是X&amp;lt;=x的分位数，为假的话就是从X&amp;gt;x的方法寻找这个值。一般我们用默认的真就可以了。&lt;/p&gt;

&lt;p&gt;接下来我们把它整理成一个函数，方便使用&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true&#34;&gt;z.test&amp;lt;-function(x,n,sigma,alpha){
mean&amp;lt;-mean(x)
ans&amp;lt;-c(
  mean-sigma*qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)/sqrt(n),mean+sigma*qnorm(1-alpha/2,mean=0,sd=1,lower.tail=TRUE)/sqrt(n))
ans
}&lt;/pre&gt;

&lt;p&gt;这样我们就可以直接使用z.test()完成对u的置信区间的计算。&lt;/p&gt;

&lt;p&gt;比如，有10个样本，分别是175,176,173,175,174,173,173,176,173,179。标准差为1.5，求均值95%的置信区间：&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true  &#34;&gt;x&amp;lt;-c(175,176,173,175,174,173,173,176,173,179)
z.test(x,10,1.5,0.05)&lt;/pre&gt;

&lt;p&gt;则返回置信区间：&lt;/p&gt;

&lt;p&gt;[1]173.7703 175.6297&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R语言系列—-数据描述</title>
      <link>http://luosha865.github.io/archives/10</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://luosha865.github.io/archives/10</guid>
      <description>&lt;p&gt;简单来说，R语言是一种主要用于统计分析、绘图的语言和操作环境。的源代码可自由下载使用，亦有已编译的执行档版本可以下载，可在多种平台下运行，包括UNIX（也包括FreeBSD和Linux）、Windows和MacOS。R主要是以命令行操作，同时有人开发了几种图形用户界面。&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
           为什么我会使用R语言呢？毕竟我们还有SPSS,SAS，S等其他工具。就我个人而言(其实对很多人也是这样)有两个原因&amp;#8212;-R的开源与其极高的自由度。
  &lt;/p&gt;
  
  &lt;p&gt;
    R是开源的，是属于GNU系统的一个自由、免费、源代码开放的软件因此在使用它时我们不用担心使用的资格问题。（当然对人一般人来说其他软件也可以使用盗版…起码国内是这样）另外作为一种语言，R拥有极高的自由度&amp;#8212;-对于，很多新的统计学模型，也许SPSS等软件根本无法处理&amp;#8212;你只能使用系统提供的有限选项。但是在R语言中，你可以自己去实现它。这也是学术界对R如此关注的原因。
  &lt;/p&gt;
  
  &lt;p&gt;
    敲了这么多废话，进入正题。
  &lt;/p&gt;
  
  &lt;p&gt;
    这一篇的内容是数据描述，就冲R中内嵌的一些简单分布开始吧。
  &lt;/p&gt;
  
  &lt;p&gt;
    R语言中提供了四类有关统计分布的函数（密度函数，累计分布函数，分位函数，随机数函数）。分别在代表该分布的R函数前加上相应前缀获得(d，p，q，r)。如正态分布的函数是norm，命令dnorm(0)就可以获得正态分布的密度函数在0处的值(0.3989)(默认为标准正态分布)。同理pnorm(0)是0.5就是正态分布的累计密度函数在0处的值。而qnorm(0.5)则得到的是0，即标准正态分布在0.5处的分位数是0（在来个比较常用的：qnorm(0.975)就是那个估计中经常用到的1.96了）。最后一个rnorm(n)则是按正态分布随机产生n个数据。上面正态分布的参数平均值和方差都是默认的0和１，你可以通过在函数里显示指定这些参数对其进行更改。如dnorm(0,1,2)则得出的是均值为1，标准差为2的正态分布在0处的概率值。要注意的是()内的顺序不能颠倒。
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
           接下来我们用R来生成一个二项分布分布的图形吧。
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
           binom是二项分布。
  &lt;/p&gt;
  
  &lt;pre class=&#34;lang:r decode:true &#34;&gt;n&amp;lt;-20
p&amp;lt;-0.2
k&amp;lt;-seq(0,n)
plot(k,dbinom(k,n,p))&lt;/pre&gt;
  
  &lt;p&gt;
    R语言中用&lt;-给变量赋值，我们先让n=20，p=0.2然后用函数seq生成一个向量(1,2,3&amp;#8230;20)并将其赋于k。然后用polt函数画图。
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
           在这里，我们用dbinom(k,n,p)生成了参数为n，p的二项分布在1….20处的概率值，然后以k的各个值为横坐标，dbinom(k,n,p)的各个值为纵坐标，绘图。
  &lt;/p&gt;
  
  &lt;p&gt;
    然后我们来看一些R对数据性质的描述。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;绘制直方图：&lt;/strong&gt;hist(x),横轴表示变量取值，纵轴表示频率。
  &lt;/p&gt;
  
  &lt;pre class=&#34;lang:r decode:true&#34;&gt;x&amp;lt;-c(1,2,3,4,5)
hist(x)&lt;/pre&gt;
  
  &lt;p&gt;
    (R语言中的向量前要求加c进行说明，故第一步是让x为一个值为(1,2,3,4,5)的向量，当然也可以看成一个值为1,2,3,4,5的样本)
  &lt;/p&gt;
  
  &lt;p&gt;
    我们来画二项分布的直方图吧
  &lt;/p&gt;
  
  &lt;pre class=&#34;lang:r decode:true &#34;&gt;N&amp;lt;-10000
n&amp;lt;-100
p&amp;lt;-0.9
x&amp;lt;-rbinom(x,n,p)
hist(x)&lt;/pre&gt;
  
  &lt;p&gt;
    思考一下,上面的代码是怎样运作的?
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;绘制茎叶图&lt;/strong&gt;： stem(x)
  &lt;/p&gt;
  
  &lt;pre class=&#34;lang:r decode:true&#34;&gt;x&amp;lt;-c(11,12,13,21,22,23)
stem(x)&lt;/pre&gt;
  
  &lt;p&gt;
    结果如下：
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    The decimal point is 1 digit(s) to the right of the |
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
      1 | 123
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
      1 |
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    2 | 123
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    另外还有
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    &lt;strong&gt;盒图：&lt;/strong&gt;boxplot(x)
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    在各种图形之后，就是对数据的数值型描述了，包括
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    最大值max(x)，最小值min(x),中位数median(x)，五个分位数fivenum(x)，平均数mean(x),样本方差var(x)，样本标准差sd(x)，样本偏度系数skewness(x)，峰度系数kurtosis(x)等等。
  &lt;/p&gt;
  
  &lt;pre class=&#34;lang:r decode:true &#34;&gt;N&amp;lt;-10000
n&amp;lt;-100
p&amp;lt;-0.9
x&amp;lt;-rbinom(x,n,p)
max(x)
min(x)
median(x)
fivenum(x)
mean(x)
var(x)
sd(x)
library(fBasics)
skewness(x)
kurtosis(x)&lt;/pre&gt;
  
  &lt;p&gt;
    就可以得到生成的随机数据的各种描述。
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
    注意：skewness函数和kurtosis函数属于一个并非默认的fBasics的包，所以需要先用library(fBasics)引入该包才能使用这两个函数。
  &lt;/p&gt;
  
  &lt;p align=&#34;left&#34;&gt;
     基本的就是这些了，当然还可以更加复杂，比如多组数据的图形与数值描述等等。即使是我们在上面使用的函数其实也是非常强大的，只是我们在上面使用了很多的默认的参数而简化了它们的调用而已。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R语言系列—回归分析</title>
      <link>http://luosha865.github.io/archives/12</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://luosha865.github.io/archives/12</guid>
      <description>&lt;p&gt;&lt;strong&gt;         &lt;/strong&gt;一元线形回归模型：有变量x,y。假设有关系y=c+bx+e,其中c+bx 是y随x变化的部分，e是随机误差。&lt;/p&gt;

&lt;p&gt;可以很容易的用函数lm()求出回归参数b,c并作相应的假设检验，如：&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true &#34;&gt;x&amp;lt;-c(0.10, 0.11, 0.12, 0.13, 0.14, 0.15,0.16, 0.17, 0.18, 0.20, 0.21, 0.23)
y&amp;lt;-c(42.0, 43.5, 45.0, 45.5, 45.0, 47.5,49.0, 53.0, 50.0, 55.0, 55.0, 60.0)
lm.sol&amp;lt;-lm(y ~ 1+x)
summary(lm.sol)
&lt;/pre&gt;

&lt;p&gt;仅列出部分返回结果：&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  Residuals:
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
    Min       1Q   Median    3Q     Max
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  -2.0431  -0.7056  0.1694  0.6633  2.2653
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  Coefficients:
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
              Estimate Std. Error      t value   Pr(&gt;|t|)
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  (Intercept)   28.493      1.580   18.04    5.88e-09 ***
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  x            130.835      9.683   13.51 9.50e-08 ***
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  在我们的输入中，关键是lm.sol&lt;-lm(y ~ 1+x)的调用，这里可以看到，lm使用了参数y~1+x,即表示我们使用的是模型y=c+bx+e (1表示常数项)
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  然后我们使用summary查看了lm返回的结果。在Residuals:中，我们可以看到的是一些关于残差的信息：最小最大值，4分位数等。Coefficients:中则是最为关键的对c和b的相关估计。其中Estimate是与b,c值的估计，Std. Error 则是回归参数b和c的标准差：sd(b), sd(c)。剩下的两个参数则是对回归参数的假设检验： t value是对b,c进行假设检验的t值，以及P-值(用来与显著性水平比较决定是否接受该阿假设检验)Pr(&gt;|t|)。最后我们还可以看到3个* 号，这表明x和y有非常显著的线性关系(*可以有0—3个，越多则线性关系越显著)。
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  多元线形回归的计算也是这样，我们只要在加入一行数据x2，然后把lm的参数改为y ~ 1+x+x2，就可以得到模型y=d+cx2+bx+e的计算结果。其中返回值的意义和上面基本一致。
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  至此，我们就可以用R建立起一个简单的线形模型，接下来，我们就要用这个模型去对新的x进行预测，预测y的值与置信区间。
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  接着上面的程序，我们先建立要预测的数据集，然后用函数predict进行预测：
&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true&#34;&gt;point&amp;lt;-data.frame(x=0.24)
predict(lm.sol,point,interval=&#34;prediction&#34;,level=0.95)&lt;/pre&gt;

&lt;p align=&#34;left&#34;&gt;
  返回结果
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
         fit      lwr      upr
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  1 59.89318 56.36215 63.42421
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  分别表示了y的预测值和上下界。
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  在函数predict中，参数lm.sol是之前建立的线形模型，point是要预测的点，参数interval=&amp;#8221;prediction&amp;#8221;表示要求给出预测的区间(上下界)，level则是该区间的预测水平。
&lt;/p&gt;

&lt;p align=&#34;left&#34;&gt;
  下面给出一个多元线形回归的完整程序：（不显示结果）
&lt;/p&gt;

&lt;pre class=&#34;lang:r decode:true &#34;&gt;y&amp;lt;-c(162,120,223,131,67,167,81,192,116,55,252,232,144,103,212)
x1&amp;lt;-c(274,180,375,205,86,265,98,330,195,53,430,372,236,157,370)
x2&amp;lt;-c(2450,3250,3802,2838,2347,3782,3008,2450,2137,2560,4020,4427,2660,2088,2605)
lm.sol&amp;lt;-lm(y~1+x1+x2)
ex&amp;lt;-data.frame(x1=200,x2=3000)
predict(lm.sol,ex,interval=&#34;prediction&#34;,level=0.95)&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编译原理虎书java版本–Chapter 2-3</title>
      <link>http://luosha865.github.io/archives/25</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://luosha865.github.io/archives/25</guid>
      <description>&lt;p&gt;options {&lt;/p&gt;

&lt;p&gt;JAVA_UNICODE_ESCAPE = true;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;PARSER_BEGIN(MiniJavaParser)&lt;/p&gt;

&lt;p&gt;public class MiniJavaParser {}&lt;/p&gt;

&lt;p&gt;PARSER_END(MiniJavaParser)&lt;/p&gt;

&lt;p&gt;// Insert a specification of a lexical analysis here.&lt;/p&gt;

&lt;p&gt;TOKEN :&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;lt; LPAREN: &amp;#8220;(&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; RPAREN: &amp;#8220;)&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; LSQPAREN: &amp;#8220;[&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; RSQPAREN: &amp;#8220;]&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; LBRACE: &amp;#8220;{&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; RBRACE: &amp;#8220;}&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; DOT: &amp;#8220;.&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; ASSIGN: &amp;#8220;=&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; LT: &amp;#8220;&amp;lt;&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; PLUS: &amp;#8220;+&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; MINUS: &amp;#8220;-&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; AND : &amp;#8220;&amp;amp;&amp;amp;&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; NOT : &amp;#8220;!&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; SEMICOLON: &amp;#8220;;&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; PUBLIC: &amp;#8220;public&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; RETURN: &amp;#8220;return&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; BOOLEAN: &amp;#8220;boolean&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; CLASS: &amp;#8220;class&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; INTERFACE: &amp;#8220;interface&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; ELSE: &amp;#8220;else&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; EXTENDS: &amp;#8220;extends&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; FALSE: &amp;#8220;false&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; IF: &amp;#8220;if&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; WHILE: &amp;#8220;while&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; INTEGER: &amp;#8220;int&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; LENGTH: &amp;#8220;length&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; MAIN: &amp;#8220;main&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; NEW: &amp;#8220;new&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; STATIC: &amp;#8220;static&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; STRING: &amp;#8220;String&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; THIS: &amp;#8220;this&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; TRUE: &amp;#8220;true&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; PRINT: &amp;#8220;System.out.println&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; VOID: &amp;#8220;void&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;TOKEN : /* LITERALS */&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;lt; INTEGER_LITERAL: ( [&amp;#8220;1&amp;#8243;-&amp;#8220;9&amp;#8243;] ([&amp;#8220;0&amp;#8243;-&amp;#8220;9&amp;#8243;])* | &amp;#8220;0&amp;#8221; ) &amp;gt;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;TOKEN : /* IDENTIFIERS */&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;lt; IDENTIFIER: &lt;LETTER&gt; (&lt;LETTER&gt;|&lt;DIGIT&gt;)* &amp;gt;&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;&amp;lt; #LETTER:&lt;/p&gt;

&lt;p&gt;[&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0024&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0041&amp;#8243;-&amp;#8220;u005a&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u005f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0061&amp;#8243;-&amp;#8220;u007a&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u00c0&amp;#8243;-&amp;#8220;u00d6&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u00d8&amp;#8243;-&amp;#8220;u00f6&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u00f8&amp;#8243;-&amp;#8220;u00ff&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0100&amp;#8243;-&amp;#8220;u1fff&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u3040&amp;#8243;-&amp;#8220;u318f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u3300&amp;#8243;-&amp;#8220;u337f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u3400&amp;#8243;-&amp;#8220;u3d2d&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u4e00&amp;#8243;-&amp;#8220;u9fff&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;uf900&amp;#8243;-&amp;#8220;ufaff&amp;#8221;&lt;/p&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;&amp;lt; #DIGIT:&lt;/p&gt;

&lt;p&gt;[&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0030&amp;#8243;-&amp;#8220;u0039&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0660&amp;#8243;-&amp;#8220;u0669&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u06f0&amp;#8243;-&amp;#8220;u06f9&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0966&amp;#8243;-&amp;#8220;u096f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u09e6&amp;#8243;-&amp;#8220;u09ef&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0a66&amp;#8243;-&amp;#8220;u0a6f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0ae6&amp;#8243;-&amp;#8220;u0aef&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0b66&amp;#8243;-&amp;#8220;u0b6f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0be7&amp;#8243;-&amp;#8220;u0bef&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0c66&amp;#8243;-&amp;#8220;u0c6f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0ce6&amp;#8243;-&amp;#8220;u0cef&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0d66&amp;#8243;-&amp;#8220;u0d6f&amp;#8221;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0e50&amp;#8243;-&amp;#8220;u0e59&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u0ed0&amp;#8243;-&amp;#8220;u0ed9&amp;#8243;,&lt;/p&gt;

&lt;p&gt;&amp;#8220;u1040&amp;#8243;-&amp;#8220;u1049&amp;#8243;&lt;/p&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;SKIP :&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;lt; &amp;#8221; &amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; &amp;#8220;t&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; &amp;#8220;n&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; &amp;#8220;r&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt; &amp;#8220;//&amp;#8221; (~[&amp;#8220;n&amp;#8221;])* &amp;#8220;n&amp;#8221; &amp;gt;&lt;/p&gt;

&lt;p&gt;| &amp;lt;&amp;#8220;/*&amp;#8221; (~[&amp;#8220;*&amp;#8221;])* &amp;#8220;*&amp;#8221; (~[&amp;#8220;/&amp;#8221;] (~[&amp;#8220;*&amp;#8221;])* &amp;#8220;*&amp;#8221;)* &amp;#8220;/&amp;#8221;&amp;gt;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// The following is a simple grammar that will allow you&lt;/p&gt;

&lt;p&gt;// to test the generated lexer.&lt;/p&gt;

&lt;p&gt;void Program() :&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;MainClass() (ClassDecl())*&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void MainClass() :&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;#8220;class&amp;#8221; &lt;IDENTIFIER&gt; &amp;#8220;{&amp;#8221; &amp;#8220;public&amp;#8221; &amp;#8220;static&amp;#8221; &amp;#8220;void&amp;#8221; &amp;#8220;main&amp;#8221; &amp;#8220;(&amp;#8221; &amp;#8220;String&amp;#8221; &amp;#8220;[&amp;#8221; &amp;#8220;]&amp;#8221; &lt;IDENTIFIER&gt; &amp;#8220;{&amp;#8221; Statement() &amp;#8220;}&amp;#8221; &amp;#8220;}&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void ext() :&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;(&amp;#8220;extends&amp;#8221;  &lt;IDENTIFIER&gt; )?&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void ClassDecl() :&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;#8220;class&amp;#8221; &lt;IDENTIFIER&gt; ext()  &amp;#8220;{&amp;#8221; (VarDecl())* (MethodDecl())* &amp;#8220;}&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void VarDecl():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{ Type() &lt;IDENTIFIER&gt; &amp;#8220;;&amp;#8221;}&lt;/p&gt;

&lt;p&gt;void MethodDecl():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;public&amp;#8221; Type() &lt;IDENTIFIER&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8220;(&amp;#8221; FormaList() &amp;#8220;)&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;{&amp;#8221; ( LOOKAHEAD(2) VarDecl() )* (Statement())*  &amp;#8220;return&amp;#8221; Exp() &amp;#8220;;&amp;#8221; &amp;#8220;}&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;void FormaList():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{(Type()  &lt;IDENTIFIER&gt; &amp;#8220;FormalRest()&amp;#8221;)?}&lt;/p&gt;

&lt;p&gt;void FormaRest():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;,&amp;#8221; Type() &lt;IDENTIFIER&gt;}&lt;/p&gt;

&lt;p&gt;void Type():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;IDENTIFIER&gt;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;boolean&amp;#8221;&lt;/p&gt;

&lt;p&gt;|LOOKAHEAD(2)&lt;/p&gt;

&lt;p&gt;&amp;#8220;int&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;int&amp;#8221; &amp;#8220;[&amp;#8221; &amp;#8220;]&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void Statement():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;{&amp;#8221; (Statement())* &amp;#8220;}&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;while&amp;#8221; &amp;#8220;(&amp;#8221; Exp() &amp;#8220;)&amp;#8221; Statement()&lt;/p&gt;

&lt;p&gt;|&amp;#8221;System.out.println&amp;#8221;  &amp;#8220;(&amp;#8221; Exp() &amp;#8220;)&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&lt;IDENTIFIER&gt; instat1() &amp;#8220;=&amp;#8221; Exp() &amp;#8220;;&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;if&amp;#8221; &amp;#8220;(&amp;#8221; Exp() &amp;#8220;)&amp;#8221; Statement() inif()&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void inif():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{(LOOKAHEAD(2) &amp;#8220;else&amp;#8221; Statement())?}&lt;/p&gt;

&lt;p&gt;void instat1():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{(&amp;#8220;[&amp;#8221; Exp() &amp;#8220;]&amp;#8221;)?}&lt;/p&gt;

&lt;p&gt;void Exp():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{Expa() (LOOKAHEAD(2) (Expb()))?&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void Expa():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;true&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;false&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&lt;IDENTIFIER&gt;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;this&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;!&amp;#8221; Exp()&lt;/p&gt;

&lt;p&gt;|&amp;#8221;(&amp;#8221; Exp() &amp;#8220;)&amp;#8221;&lt;/p&gt;

&lt;p&gt;|LOOKAHEAD(2)&lt;/p&gt;

&lt;p&gt;&amp;#8220;new&amp;#8221; &amp;#8220;int&amp;#8221; &amp;#8220;[&amp;#8221; Exp() &amp;#8220;]&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;new&amp;#8221; &lt;IDENTIFIER&gt; &amp;#8220;(&amp;#8221; &amp;#8220;)&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void Expb():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;op() Exp()&lt;/p&gt;

&lt;p&gt;|&amp;#8221;[&amp;#8221; Exp() &amp;#8220;]&amp;#8221;Exp()&lt;/p&gt;

&lt;p&gt;|LOOKAHEAD(2)&lt;/p&gt;

&lt;p&gt;&amp;#8220;.&amp;#8221; &amp;#8220;length&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;.&amp;#8221; &lt;IDENTIFIER&gt;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void op():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;&amp;amp;&amp;amp;&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;&amp;lt;&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;+&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;-&amp;#8221;&lt;/p&gt;

&lt;p&gt;|&amp;#8221;*&amp;#8221;}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;void ExpList():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{(Exp()  (ExpRest())*)?}&lt;/p&gt;

&lt;p&gt;void ExpRest():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&amp;#8220;,&amp;#8221; Exp()}&lt;/p&gt;

&lt;p&gt;void Goal() :&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;( MiniJavaToken() )*&lt;/p&gt;

&lt;p&gt;&lt;EOF&gt;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void MiniJavaToken():&lt;/p&gt;

&lt;p&gt;{}&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;&amp;#8220;class&amp;#8221;  |  &lt;IDENTIFIER&gt; | &amp;#8220;{&amp;#8221; | &amp;#8220;public&amp;#8221; | &amp;#8220;static&amp;#8221; | &amp;#8220;void&amp;#8221; |&lt;/p&gt;

&lt;p&gt;&amp;#8220;main&amp;#8221; | &amp;#8220;(&amp;#8221; | &amp;#8220;String&amp;#8221;  | &amp;#8220;[&amp;#8221; | &amp;#8220;]&amp;#8221; | &amp;#8220;)&amp;#8221; | &amp;#8220;}&amp;#8221; | &amp;#8220;extends&amp;#8221; | &amp;#8220;;&amp;#8221;&lt;/p&gt;

&lt;p&gt;| &amp;#8220;return&amp;#8221; | &amp;#8220;,&amp;#8221; | &amp;#8220;int&amp;#8221; | &amp;#8220;boolean&amp;#8221; | &amp;#8220;=&amp;#8221; | &amp;#8220;if&amp;#8221; | &amp;#8220;else&amp;#8221; | &amp;#8220;while&amp;#8221;&lt;/p&gt;

&lt;p&gt;| &amp;#8220;System.out.println&amp;#8221; | &amp;#8220;&amp;amp;&amp;amp;&amp;#8221; | &amp;#8220;&amp;lt;&amp;#8221; | &amp;#8220;+&amp;#8221; | &amp;#8220;-&amp;#8221; | &amp;#8220;*&amp;#8221; | &amp;#8220;.&amp;#8221; |&lt;/p&gt;

&lt;p&gt;&amp;#8220;length&amp;#8221; | &lt;INTEGER_LITERAL&gt; | &amp;#8220;true&amp;#8221; | &amp;#8220;false&amp;#8221; | &amp;#8220;this&amp;#8221; | &amp;#8220;new&amp;#8221; |&lt;/p&gt;

&lt;p&gt;&amp;#8220;!&amp;#8221;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>编译原理虎书java版本–Chapter 1</title>
      <link>http://luosha865.github.io/archives/28</link>
      <pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://luosha865.github.io/archives/28</guid>
      <description>&lt;p&gt;Count.java&lt;/p&gt;

&lt;p&gt;public class  Count&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;int resolveStm(Stm stm){&lt;/p&gt;

&lt;p&gt;int temp1=0,temp2=0;&lt;/p&gt;

&lt;p&gt;if(stm.kind==1){&lt;/p&gt;

&lt;p&gt;temp1=resolveStm(((CompoundStm)stm).stm1);&lt;/p&gt;

&lt;p&gt;temp2=resolveStm(((CompoundStm)stm).stm2);&lt;/p&gt;

&lt;p&gt;return temp1&amp;gt;temp2? temp1:temp2;&lt;/p&gt;

&lt;p&gt;}else if(stm.kind==2){&lt;/p&gt;

&lt;p&gt;return resolveExp(((AssignStm)stm).exp);&lt;/p&gt;

&lt;p&gt;}else if (stm.kind==3){&lt;/p&gt;

&lt;p&gt;return countExpInExpList(((PrintStm)stm).exps);&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;int countExpInExpList(ExpList expList){&lt;/p&gt;

&lt;p&gt;if(expList.kind==1){&lt;/p&gt;

&lt;p&gt;return 1;&lt;/p&gt;

&lt;p&gt;}else if(expList.kind==2){&lt;/p&gt;

&lt;p&gt;return 1+countExpInExpList(((PairExpList)expList).tail);&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;int resolveExp(Exp exp){&lt;/p&gt;

&lt;p&gt;int temp1,temp2;&lt;/p&gt;

&lt;p&gt;if(exp.kind==1){&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==2){&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==3){&lt;/p&gt;

&lt;p&gt;temp1 = resolveExp(((OpExp)exp).left);&lt;/p&gt;

&lt;p&gt;temp2 = resolveExp(((OpExp)exp).right);&lt;/p&gt;

&lt;p&gt;return temp1&amp;gt;temp2?temp1:temp2;&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==4){&lt;/p&gt;

&lt;p&gt;temp1=resolveStm(((EseqExp)exp).stm);&lt;/p&gt;

&lt;p&gt;temp2=resolveExp(((EseqExp)exp).exp);&lt;/p&gt;

&lt;p&gt;return temp1&amp;gt;temp2?temp1:temp2;&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;int resolveExpList(ExpList expList){&lt;/p&gt;

&lt;p&gt;int temp1,temp2;&lt;/p&gt;

&lt;p&gt;if(expList.kind==2){&lt;/p&gt;

&lt;p&gt;temp1 = resolveExp(((PairExpList)expList).head);&lt;/p&gt;

&lt;p&gt;temp2 = resolveExpList(((PairExpList)expList).tail);&lt;/p&gt;

&lt;p&gt;return temp1&amp;gt;temp2?temp1:temp2;&lt;/p&gt;

&lt;p&gt;}else if(expList.kind==1){&lt;/p&gt;

&lt;p&gt;return resolveExp(((LastExpList)expList).last);&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return 0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Interp.java&lt;/p&gt;

&lt;p&gt;public class  Interp&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;void startinterpStm(Stm stm){&lt;/p&gt;

&lt;p&gt;Table t=new Table(null,0,null);&lt;/p&gt;

&lt;p&gt;interpStm(stm,t);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Table interpStm(Stm stm,Table t){&lt;/p&gt;

&lt;p&gt;if(stm.kind==1){&lt;/p&gt;

&lt;p&gt;Table t1=interpStm(((CompoundStm)stm).stm1,t);&lt;/p&gt;

&lt;p&gt;Table t2=interpStm(((CompoundStm)stm).stm2,t1);&lt;/p&gt;

&lt;p&gt;return t2;&lt;/p&gt;

&lt;p&gt;}else if(stm.kind==2){&lt;/p&gt;

&lt;p&gt;IntAndTable it1 = interExp(((AssignStm)stm).exp,t);&lt;/p&gt;

&lt;p&gt;Table t1=update(it1.t,((AssignStm)stm).id,it1.i);&lt;/p&gt;

&lt;p&gt;return t1;&lt;/p&gt;

&lt;p&gt;}else if(stm.kind==3){&lt;/p&gt;

&lt;p&gt;printExplist(((PrintStm)stm).exps,t);&lt;/p&gt;

&lt;p&gt;return t;&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return t;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;IntAndTable interExp(Exp exp,Table t){&lt;/p&gt;

&lt;p&gt;if(exp.kind==1){&lt;/p&gt;

&lt;p&gt;int temp=lookup(t,((IdExp)exp).id);&lt;/p&gt;

&lt;p&gt;return new IntAndTable(temp,t);&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==2){&lt;/p&gt;

&lt;p&gt;return new IntAndTable(((NumExp)exp).num,t);&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==3){&lt;/p&gt;

&lt;p&gt;IntAndTable it1= interExp(((OpExp)exp).left,t);&lt;/p&gt;

&lt;p&gt;IntAndTable it2= interExp(((OpExp)exp).right,it1.t);&lt;/p&gt;

&lt;p&gt;int x1,x2,result;&lt;/p&gt;

&lt;p&gt;x1=it1.i;&lt;/p&gt;

&lt;p&gt;x2=it2.i;&lt;/p&gt;

&lt;p&gt;if(((OpExp)exp).oper==1){&lt;/p&gt;

&lt;p&gt;result=x1+x2;&lt;/p&gt;

&lt;p&gt;}else if(((OpExp)exp).oper==2){&lt;/p&gt;

&lt;p&gt;result=x1-x2;&lt;/p&gt;

&lt;p&gt;}else if(((OpExp)exp).oper==3){&lt;/p&gt;

&lt;p&gt;result=x1*x2;&lt;/p&gt;

&lt;p&gt;}else if(((OpExp)exp).oper==4){&lt;/p&gt;

&lt;p&gt;result=x1/x2;&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;result=0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;return new IntAndTable(result,t);&lt;/p&gt;

&lt;p&gt;}else if(exp.kind==4){&lt;/p&gt;

&lt;p&gt;Table t1=interpStm(((EseqExp)exp).stm,t);&lt;/p&gt;

&lt;p&gt;IntAndTable t3= interExp(((EseqExp)exp).exp,t1);&lt;/p&gt;

&lt;p&gt;return t3;&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;return new IntAndTable(0,t);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Table update(Table t1,String i,int v){&lt;/p&gt;

&lt;p&gt;Table t2=new Table(i,v,t1);&lt;/p&gt;

&lt;p&gt;return t2;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;int lookup(Table t,String key){&lt;/p&gt;

&lt;p&gt;if(key.compareTo(t.id)==0){&lt;/p&gt;

&lt;p&gt;return t.value;&lt;/p&gt;

&lt;p&gt;}else return lookup(t.tail,key);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;void printExplist(ExpList exps,Table t){&lt;/p&gt;

&lt;p&gt;if(exps.kind==1){&lt;/p&gt;

&lt;p&gt;IntAndTable temp=interExp(((LastExpList)exps).last,t);&lt;/p&gt;

&lt;p&gt;System.out.println(temp.i);&lt;/p&gt;

&lt;p&gt;}else if(exps.kind==2){&lt;/p&gt;

&lt;p&gt;IntAndTable temp=interExp(((PairExpList)exps).head,t);&lt;/p&gt;

&lt;p&gt;System.out.print(temp.i+&amp;#8221; &amp;#8220;);&lt;/p&gt;

&lt;p&gt;printExplist(((PairExpList)exps).tail,t);&lt;/p&gt;

&lt;p&gt;}else return;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// IntAndTable interExpList(ExpList explist,Table t){&lt;/p&gt;

&lt;p&gt;// }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class Table&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;String id;&lt;/p&gt;

&lt;p&gt;int value;&lt;/p&gt;

&lt;p&gt;Table tail;&lt;/p&gt;

&lt;p&gt;Table(String i,int v,Table t){id=i;value=v;tail=t;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class IntAndTable&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;int i;&lt;/p&gt;

&lt;p&gt;Table t;&lt;/p&gt;

&lt;p&gt;IntAndTable(int ii,Table tt){i=ii;t=tt;};&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>