<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译原理 on 悟剑阁</title>
    <link>http://blog.sword865.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.xml</link>
    <description>Recent content in 编译原理 on 悟剑阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>sword865@163.com (罗刹剑客)</managingEditor>
    <webMaster>sword865@163.com (罗刹剑客)</webMaster>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <atom:link href="http://blog.sword865.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>编译原理虎书java版本–Chapter 2-3</title>
      <link>http://blog.sword865.com/archives/25</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/25</guid>
      <description>&lt;p&gt;文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options {
    JAVA_UNICODE_ESCAPE = true;
}
PARSER_BEGIN(MiniJavaParser)
public class MiniJavaParser {}
PARSER_END(MiniJavaParser)
// Insert a specification of a lexical analysis here.
TOKEN :
{
    &amp;lt; LPAREN: &amp;quot;(&amp;quot; &amp;gt;
        | &amp;lt; RPAREN: &amp;quot;)&amp;quot; &amp;gt;
        | &amp;lt; LSQPAREN: &amp;quot;[&amp;quot; &amp;gt;
        | &amp;lt; RSQPAREN: &amp;quot;]&amp;quot; &amp;gt;
        | &amp;lt; LBRACE: &amp;quot;{&amp;quot; &amp;gt;
        | &amp;lt; RBRACE: &amp;quot;}&amp;quot; &amp;gt;
        | &amp;lt; DOT: &amp;quot;.&amp;quot; &amp;gt;
        | &amp;lt; ASSIGN: &amp;quot;=&amp;quot; &amp;gt;
        | &amp;lt; LT: &amp;quot;&amp;lt;&amp;quot; &amp;gt;
        | &amp;lt; PLUS: &amp;quot;+&amp;quot; &amp;gt;
        | &amp;lt; MINUS: &amp;quot;-&amp;quot; &amp;gt;
        | &amp;lt; AND : &amp;quot;&amp;amp;&amp;amp;&amp;quot; &amp;gt;
        | &amp;lt; NOT : &amp;quot;!&amp;quot; &amp;gt;
        | &amp;lt; SEMICOLON: &amp;quot;;&amp;quot; &amp;gt;
        | &amp;lt; PUBLIC: &amp;quot;public&amp;quot; &amp;gt;
        | &amp;lt; RETURN: &amp;quot;return&amp;quot; &amp;gt;
        | &amp;lt; BOOLEAN: &amp;quot;boolean&amp;quot; &amp;gt;
        | &amp;lt; CLASS: &amp;quot;class&amp;quot; &amp;gt;
        | &amp;lt; INTERFACE: &amp;quot;interface&amp;quot; &amp;gt;
        | &amp;lt; ELSE: &amp;quot;else&amp;quot; &amp;gt;
        | &amp;lt; EXTENDS: &amp;quot;extends&amp;quot; &amp;gt;
        | &amp;lt; FALSE: &amp;quot;false&amp;quot; &amp;gt;
        | &amp;lt; IF: &amp;quot;if&amp;quot; &amp;gt;
        | &amp;lt; WHILE: &amp;quot;while&amp;quot; &amp;gt;
        | &amp;lt; INTEGER: &amp;quot;int&amp;quot; &amp;gt;
        | &amp;lt; LENGTH: &amp;quot;length&amp;quot; &amp;gt;
        | &amp;lt; MAIN: &amp;quot;main&amp;quot; &amp;gt;
        | &amp;lt; NEW: &amp;quot;new&amp;quot; &amp;gt;
        | &amp;lt; STATIC: &amp;quot;static&amp;quot; &amp;gt;
        | &amp;lt; STRING: &amp;quot;String&amp;quot; &amp;gt;
        | &amp;lt; THIS: &amp;quot;this&amp;quot; &amp;gt;
        | &amp;lt; TRUE: &amp;quot;true&amp;quot; &amp;gt;
        | &amp;lt; PRINT: &amp;quot;System.out.println&amp;quot; &amp;gt;
        | &amp;lt; VOID: &amp;quot;void&amp;quot; &amp;gt;
    }
    TOKEN : /* LITERALS */
    {
        &amp;lt; INTEGER_LITERAL: ( [&amp;quot;1&amp;quot;-&amp;quot;9&amp;quot;] ([&amp;quot;0&amp;quot;-&amp;quot;9&amp;quot;])* | &amp;quot;0&amp;quot; ) &amp;gt;
    }
    TOKEN : /* IDENTIFIERS */
    {
        &amp;lt; IDENTIFIER: (|)* &amp;gt;
        |
        &amp;lt; #LETTER:
        [
        &amp;quot;u0024&amp;quot;,
        &amp;quot;u0041&amp;quot;-&amp;quot;u005a&amp;quot;,
        &amp;quot;u005f&amp;quot;,
        &amp;quot;u0061&amp;quot;-&amp;quot;u007a&amp;quot;,
        &amp;quot;u00c0&amp;quot;-&amp;quot;u00d6&amp;quot;,
        &amp;quot;u00d8&amp;quot;-&amp;quot;u00f6&amp;quot;,
        &amp;quot;u00f8&amp;quot;-&amp;quot;u00ff&amp;quot;,
        &amp;quot;u0100&amp;quot;-&amp;quot;u1fff&amp;quot;,
        &amp;quot;u3040&amp;quot;-&amp;quot;u318f&amp;quot;,
        &amp;quot;u3300&amp;quot;-&amp;quot;u337f&amp;quot;,
        &amp;quot;u3400&amp;quot;-&amp;quot;u3d2d&amp;quot;,
        &amp;quot;u4e00&amp;quot;-&amp;quot;u9fff&amp;quot;,
        &amp;quot;uf900&amp;quot;-&amp;quot;ufaff&amp;quot;
        ]
        |
        &amp;lt; #DIGIT:
        [
        &amp;quot;u0030&amp;quot;-&amp;quot;u0039&amp;quot;,
        &amp;quot;u0660&amp;quot;-&amp;quot;u0669&amp;quot;,
        &amp;quot;u06f0&amp;quot;-&amp;quot;u06f9&amp;quot;,
        &amp;quot;u0966&amp;quot;-&amp;quot;u096f&amp;quot;,
        &amp;quot;u09e6&amp;quot;-&amp;quot;u09ef&amp;quot;,
        &amp;quot;u0a66&amp;quot;-&amp;quot;u0a6f&amp;quot;,
        &amp;quot;u0ae6&amp;quot;-&amp;quot;u0aef&amp;quot;,
        &amp;quot;u0b66&amp;quot;-&amp;quot;u0b6f&amp;quot;,
        &amp;quot;u0be7&amp;quot;-&amp;quot;u0bef&amp;quot;,
        &amp;quot;u0c66&amp;quot;-&amp;quot;u0c6f&amp;quot;,
        &amp;quot;u0ce6&amp;quot;-&amp;quot;u0cef&amp;quot;,
        &amp;quot;u0d66&amp;quot;-&amp;quot;u0d6f&amp;quot;,
        &amp;quot;u0e50&amp;quot;-&amp;quot;u0e59&amp;quot;,
        &amp;quot;u0ed0&amp;quot;-&amp;quot;u0ed9&amp;quot;,
        &amp;quot;u1040&amp;quot;-&amp;quot;u1049&amp;quot;
        ]
    }
    SKIP :
    {
        &amp;lt; &amp;quot; &amp;quot; &amp;gt;
        | &amp;lt; &amp;quot;t&amp;quot; &amp;gt;
        | &amp;lt; &amp;quot;n&amp;quot; &amp;gt;
        | &amp;lt; &amp;quot;r&amp;quot; &amp;gt;
        | &amp;lt; &amp;quot;//&amp;quot; (~[&amp;quot;n&amp;quot;])* &amp;quot;n&amp;quot; &amp;gt;
        | &amp;lt;&amp;quot;/*&amp;quot; (~[&amp;quot;*&amp;quot;])* &amp;quot;*&amp;quot; (~[&amp;quot;/&amp;quot;] (~[&amp;quot;*&amp;quot;])* &amp;quot;*&amp;quot;)* &amp;quot;/&amp;quot;&amp;gt;
    }
    // The following is a simple grammar that will allow you
    // to test the generated lexer.
    void Program() :
    {}
    {
        MainClass() (ClassDecl())*
    }
    void MainClass() :
    {}
    {
        &amp;quot;class&amp;quot; &amp;quot;{&amp;quot; &amp;quot;public&amp;quot; &amp;quot;static&amp;quot; &amp;quot;void&amp;quot; &amp;quot;main&amp;quot; &amp;quot;(&amp;quot; &amp;quot;String&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; &amp;quot;{&amp;quot; Statement() &amp;quot;}&amp;quot; &amp;quot;}&amp;quot;
    }
    void ext() :
    {}
    {
        (&amp;quot;extends&amp;quot;  )?
    }
    void ClassDecl() :
    {}
    {
        &amp;quot;class&amp;quot; ext()  &amp;quot;{&amp;quot; (VarDecl())* (MethodDecl())* &amp;quot;}&amp;quot;
    }
    void VarDecl():
    {}
    { Type() &amp;quot;;&amp;quot;}
    void MethodDecl():
    {}
    {&amp;quot;public&amp;quot; Type()
        &amp;quot;(&amp;quot; FormaList() &amp;quot;)&amp;quot;
        &amp;quot;{&amp;quot; ( LOOKAHEAD(2) VarDecl() )* (Statement())*  &amp;quot;return&amp;quot; Exp() &amp;quot;;&amp;quot; &amp;quot;}&amp;quot;
    }
    void FormaList():
    {}
    {(Type()  &amp;quot;FormalRest()&amp;quot;)?}
    void FormaRest():
    {}
    {&amp;quot;,&amp;quot; Type() }
    void Type():
    {}
    {
        |&amp;quot;boolean&amp;quot;
        |LOOKAHEAD(2)
        &amp;quot;int&amp;quot;
        |&amp;quot;int&amp;quot; &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;
    }
    void Statement():
    {}
    {&amp;quot;{&amp;quot; (Statement())* &amp;quot;}&amp;quot;
    |&amp;quot;while&amp;quot; &amp;quot;(&amp;quot; Exp() &amp;quot;)&amp;quot; Statement()
    |&amp;quot;System.out.println&amp;quot;  &amp;quot;(&amp;quot; Exp() &amp;quot;)&amp;quot;
    | instat1() &amp;quot;=&amp;quot; Exp() &amp;quot;;&amp;quot;
    |&amp;quot;if&amp;quot; &amp;quot;(&amp;quot; Exp() &amp;quot;)&amp;quot; Statement() inif()
}
void inif():
{}
{(LOOKAHEAD(2) &amp;quot;else&amp;quot; Statement())?}
void instat1():
{}
{(&amp;quot;[&amp;quot; Exp() &amp;quot;]&amp;quot;)?}
void Exp():
{}
{Expa() (LOOKAHEAD(2) (Expb()))?
}
void Expa():
{}
{&amp;quot;true&amp;quot;
    |&amp;quot;false&amp;quot;
    |
    |&amp;quot;this&amp;quot;
    |&amp;quot;!&amp;quot; Exp()
    |&amp;quot;(&amp;quot; Exp() &amp;quot;)&amp;quot;
    |LOOKAHEAD(2)
    &amp;quot;new&amp;quot; &amp;quot;int&amp;quot; &amp;quot;[&amp;quot; Exp() &amp;quot;]&amp;quot;
    |&amp;quot;new&amp;quot; &amp;quot;(&amp;quot; &amp;quot;)&amp;quot;
}
void Expb():
{}
{
    op() Exp()
    |&amp;quot;[&amp;quot; Exp() &amp;quot;]&amp;quot;Exp()
    |LOOKAHEAD(2)
    &amp;quot;.&amp;quot; &amp;quot;length&amp;quot;
    |&amp;quot;.&amp;quot;
}
void op():
{}
{&amp;quot;&amp;amp;&amp;amp;&amp;quot;
    |&amp;quot;&amp;lt;&amp;quot;
    |&amp;quot;+&amp;quot;
    |&amp;quot;-&amp;quot;
    |&amp;quot;*&amp;quot;}
    void ExpList():
    {}
    {(Exp()  (ExpRest())*)?}
    void ExpRest():
    {}
    {&amp;quot;,&amp;quot; Exp()}
    void Goal() :
    {}
    {
        ( MiniJavaToken() )*
    }
    void MiniJavaToken():
    {}
    {
        &amp;quot;class&amp;quot;  |  | &amp;quot;{&amp;quot; | &amp;quot;public&amp;quot; | &amp;quot;static&amp;quot; | &amp;quot;void&amp;quot; |
            &amp;quot;main&amp;quot; | &amp;quot;(&amp;quot; | &amp;quot;String&amp;quot;  | &amp;quot;[&amp;quot; | &amp;quot;]&amp;quot; | &amp;quot;)&amp;quot; | &amp;quot;}&amp;quot; | &amp;quot;extends&amp;quot; | &amp;quot;;&amp;quot;
            | &amp;quot;return&amp;quot; | &amp;quot;,&amp;quot; | &amp;quot;int&amp;quot; | &amp;quot;boolean&amp;quot; | &amp;quot;=&amp;quot; | &amp;quot;if&amp;quot; | &amp;quot;else&amp;quot; | &amp;quot;while&amp;quot;
            | &amp;quot;System.out.println&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;.&amp;quot; |
            &amp;quot;length&amp;quot; | | &amp;quot;true&amp;quot; | &amp;quot;false&amp;quot; | &amp;quot;this&amp;quot; | &amp;quot;new&amp;quot; |
            &amp;quot;!&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>编译原理虎书java版本–Chapter 1</title>
      <link>http://blog.sword865.com/archives/28</link>
      <pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/28</guid>
      <description>&lt;p&gt;Count.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class  Count
{
    int resolveStm(Stm stm){
        int temp1=0,temp2=0;
        if(stm.kind==1){
            temp1=resolveStm(((CompoundStm)stm).stm1);
            temp2=resolveStm(((CompoundStm)stm).stm2);
            return temp1&amp;gt;temp2? temp1:temp2;
        }else if(stm.kind==2){
            return resolveExp(((AssignStm)stm).exp);
        }else if (stm.kind==3){
            return countExpInExpList(((PrintStm)stm).exps);
        }else{
            return 0;
        }
    }
    int countExpInExpList(ExpList expList){
        if(expList.kind==1){
            return 1;
        }else if(expList.kind==2){
            return 1+countExpInExpList(((PairExpList)expList).tail);
        }else{
            return 0;
        }
    }
    int resolveExp(Exp exp){
        int temp1,temp2;
        if(exp.kind==1){
            return 0;
        }else if(exp.kind==2){
            return 0;
        }else if(exp.kind==3){
            temp1 = resolveExp(((OpExp)exp).left);
            temp2 = resolveExp(((OpExp)exp).right);
            return temp1&amp;gt;temp2?temp1:temp2;
        }else if(exp.kind==4){
            temp1=resolveStm(((EseqExp)exp).stm);
            temp2=resolveExp(((EseqExp)exp).exp);
            return temp1&amp;gt;temp2?temp1:temp2;
        }else{
            return 0;
        }
    }
    int resolveExpList(ExpList expList){
        int temp1,temp2;
        if(expList.kind==2){
            temp1 = resolveExp(((PairExpList)expList).head);
            temp2 = resolveExpList(((PairExpList)expList).tail);
            return temp1&amp;gt;temp2?temp1:temp2;
        }else if(expList.kind==1){
            return resolveExp(((LastExpList)expList).last);
        }else{
            return 0;
        }
    }
}
Interp.java
public class  Interp
{
    void startinterpStm(Stm stm){
        Table t=new Table(null,0,null);
        interpStm(stm,t);
    }
    Table interpStm(Stm stm,Table t){
        if(stm.kind==1){
            Table t1=interpStm(((CompoundStm)stm).stm1,t);
            Table t2=interpStm(((CompoundStm)stm).stm2,t1);
            return t2;
        }else if(stm.kind==2){
            IntAndTable it1 = interExp(((AssignStm)stm).exp,t);
            Table t1=update(it1.t,((AssignStm)stm).id,it1.i);
            return t1;
        }else if(stm.kind==3){
            printExplist(((PrintStm)stm).exps,t);
            return t;
        }else{
            return t;
        }
    }
    IntAndTable interExp(Exp exp,Table t){
        if(exp.kind==1){
            int temp=lookup(t,((IdExp)exp).id);
            return new IntAndTable(temp,t);
        }else if(exp.kind==2){
            return new IntAndTable(((NumExp)exp).num,t);
        }else if(exp.kind==3){
            IntAndTable it1= interExp(((OpExp)exp).left,t);
            IntAndTable it2= interExp(((OpExp)exp).right,it1.t);
            int x1,x2,result;
            x1=it1.i;
            x2=it2.i;
            if(((OpExp)exp).oper==1){
                result=x1+x2;
            }else if(((OpExp)exp).oper==2){
                result=x1-x2;
            }else if(((OpExp)exp).oper==3){
                result=x1*x2;
            }else if(((OpExp)exp).oper==4){
                result=x1/x2;
            }else{
                result=0;
            }
            return new IntAndTable(result,t);
        }else if(exp.kind==4){
            Table t1=interpStm(((EseqExp)exp).stm,t);
            IntAndTable t3= interExp(((EseqExp)exp).exp,t1);
            return t3;
        }else{
            return new IntAndTable(0,t);
        }
    }
    Table update(Table t1,String i,int v){
        Table t2=new Table(i,v,t1);
        return t2;
    }
    int lookup(Table t,String key){
        if(key.compareTo(t.id)==0){
            return t.value;
        }else return lookup(t.tail,key);
    }
    void printExplist(ExpList exps,Table t){
        if(exps.kind==1){
            IntAndTable temp=interExp(((LastExpList)exps).last,t);
            System.out.println(temp.i);
        }else if(exps.kind==2){
            IntAndTable temp=interExp(((PairExpList)exps).head,t);
            System.out.print(temp.i+&amp;quot;&amp;quot;);
            printExplist(((PairExpList)exps).tail,t);
        }else return;
    }
// IntAndTable interExpList(ExpList explist,Table t){
// }
}
class Table
{
    String id;
    int value;
    Table tail;
    Table(String i,int v,Table t){id=i;value=v;tail=t;}
}
class IntAndTable
{
    int i;
    Table t;
    IntAndTable(int ii,Table tt){i=ii;t=tt;};
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>