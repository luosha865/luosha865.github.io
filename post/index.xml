<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 悟剑阁</title>
    <link>http://blog.sword865.com/post/</link>
    <description>Recent content in Posts on 悟剑阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>sword865@163.com (罗刹剑客)</managingEditor>
    <webMaster>sword865@163.com (罗刹剑客)</webMaster>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Sun, 12 Mar 2017 15:49:45 +0800</lastBuildDate>
    
	<atom:link href="http://blog.sword865.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>比较一下spark2的DataFrame和RDD</title>
      <link>http://blog.sword865.com/2017/03/12/%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84DataFrame%E5%92%8CRDD/</link>
      <pubDate>Sun, 12 Mar 2017 15:49:45 +0800</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/2017/03/12/%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8Bspark2%E7%9A%84DataFrame%E5%92%8CRDD/</guid>
      <description>前段时间把spark集群升级到2.x，使用起来感觉相对1.x的版本最大的改动就是DataFrame正式开始替代RDD成为主流，包括我们最常用</description>
    </item>
    
    <item>
      <title>谈谈Factorization Machine</title>
      <link>http://blog.sword865.com/2016/11/04/%E8%B0%88%E8%B0%88Factorization-Machine/</link>
      <pubDate>Fri, 04 Nov 2016 22:47:21 +0800</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/2016/11/04/%E8%B0%88%E8%B0%88Factorization-Machine/</guid>
      <description>因子分解机(Factorization Machine, 简称FM)是一种不错的CTR预估模型，也是我们现在在使用的广告点击率预估模型，比起著名的Logist</description>
    </item>
    
    <item>
      <title>Elasticsearch-HttpServerModule</title>
      <link>http://blog.sword865.com/archives/150/</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/150/</guid>
      <description>HttpServerModule的请求主要由HttpServer中的HttpServerTransport(默认为NettyHttpServ</description>
    </item>
    
    <item>
      <title>Tornado框架简析</title>
      <link>http://blog.sword865.com/archives/100/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/100/</guid>
      <description>Tornado是一款轻量级的Web服务器，同时又是一个开发框架。采用单线程非阻塞I/O模型(epoll)，主要是为了应对高并发 访问量而被开发</description>
    </item>
    
    <item>
      <title>Lucene索引文件学习</title>
      <link>http://blog.sword865.com/archives/86/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/86/</guid>
      <description>最近在做搜索，抽空看一下lucene，资料挺多的，不过大部分都是3.x了……在对着官方文档大概看一下。 优化后的lucene索引文件(4.9.</description>
    </item>
    
    <item>
      <title>基于标签的推荐系统</title>
      <link>http://blog.sword865.com/archives/5/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/5/</guid>
      <description>一、基于图模型的推荐 在不考虑标签时，基于二项图有两种随机游走的图推荐算法： 1.probability spreading 随机游走算法，在游走中，每个目标得到权重是基于归属者的边计算出</description>
    </item>
    
    <item>
      <title>Google在KDD2013上关于CTR的一篇论文</title>
      <link>http://blog.sword865.com/archives/6/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/6/</guid>
      <description>最近在做CTR，刚好Google在KDD发了一篇文章，讲了他们的一些尝试，总结一下： 先是一些公式的符号说明： 一、优化算法 CTR中经常用Log</description>
    </item>
    
    <item>
      <title>[转] Deep Learning（深度学习）学习笔记整理系列</title>
      <link>http://blog.sword865.com/archives/7/</link>
      <pubDate>Fri, 26 Apr 2013 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/7/</guid>
      <description>转一套Deep Learning的文章 http://blog.csdn.net/zouxy09/article/details/8775360 顺便附上翻译的UFLDL http://deeplearning.stanford.edu/wiki/index.php/UFLDL%E6%95%99%E7%A8%8B</description>
    </item>
    
    <item>
      <title>决策粗糙集</title>
      <link>http://blog.sword865.com/archives/8/</link>
      <pubDate>Thu, 25 Apr 2013 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/8/</guid>
      <description>今天收拾资料，发现了以前刚接触粗糙集时写的一个综述，好久没写博客，发上来充数好了 一、粗糙集模型1 粗糙集是Pawlak于上世纪八十年代提出的一</description>
    </item>
    
    <item>
      <title>R语言系列—-区间估计</title>
      <link>http://blog.sword865.com/archives/11/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/11/</guid>
      <description>这一篇讲的是区间估计…..因为这不是一个关于统计学的系列，所以对文中出现的公式不会给予任何证明…..就是这样。 就从一个最简单的正态分布的方差</description>
    </item>
    
    <item>
      <title>R语言系列—-数据描述</title>
      <link>http://blog.sword865.com/archives/10/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/10/</guid>
      <description>简单来说，R语言是一种主要用于统计分析、绘图的语言和操作环境。的源代码可自由下载使用，亦有已编译的执行档版本可以下载，可在多种平台下运行，包</description>
    </item>
    
    <item>
      <title>R语言系列—回归分析</title>
      <link>http://blog.sword865.com/archives/12/</link>
      <pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/12/</guid>
      <description>一元线形回归模型：有变量x,y。假设有关系y=c+bx+e,其中c+bx 是y随x变化的部分，e是随机误差。 可以很容易的用函数lm()求出回归</description>
    </item>
    
    <item>
      <title>简单讲一下使用MS3D为opengl建模</title>
      <link>http://blog.sword865.com/archives/124/</link>
      <pubDate>Wed, 16 Mar 2011 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/124/</guid>
      <description>做毕设的时候写的东西，贴上来吧………… 由于在OPENGL只能通过程序语言绘制模型，远不能达到可见既可得的目的。因此，比起3DMAX、MAYA</description>
    </item>
    
    <item>
      <title>算法总结9—优化</title>
      <link>http://blog.sword865.com/archives/13/</link>
      <pubDate>Wed, 30 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/13/</guid>
      <description>不同于之前的分类和聚类算法，优化的目的是尝试找到一个使成本函数输出最小化的值。这里主要包括两个算法：模拟退火算法和遗传算法。 成本函数**: **</description>
    </item>
    
    <item>
      <title>算法总结8—非负矩阵因式分解</title>
      <link>http://blog.sword865.com/archives/14/</link>
      <pubDate>Fri, 25 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/14/</guid>
      <description>数学基础: 线性代数的矩阵乘法运算。 &amp;nbsp; &amp;nbsp;&amp;nbsp; 非负矩阵分解是一种特征提取的算法，它尝试从数据集中寻找新的数据行，将这些新找到的数据行加以组合，就可以</description>
    </item>
    
    <item>
      <title>算法总结7—多维缩放</title>
      <link>http://blog.sword865.com/archives/15/</link>
      <pubDate>Sun, 20 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/15/</guid>
      <description>一直没有时间写…..唉 这个东西好像是属于数据可视化？反正就是把多维的数据降到低维空间但是仍然尽可能的保持原来数据之间的距离关系(就是在原来维</description>
    </item>
    
    <item>
      <title>算法总结5&amp;6—-k-最近邻与聚类</title>
      <link>http://blog.sword865.com/archives/16/</link>
      <pubDate>Mon, 14 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/16/</guid>
      <description>因为这两个算法比较简单，又有些相似，所以这里放在一起。 K-最近邻: k-最近邻也是一种用来进行预测的算法。 工作原理： 接受一个用以进行数值预测的</description>
    </item>
    
    <item>
      <title>统计,逻辑与智能</title>
      <link>http://blog.sword865.com/archives/17/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/17/</guid>
      <description>&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; 今天上了开学的第一节统计学，开了很久的小差，想了不少东西。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;以前虽然自学过概率论与数理统计，但是也只是了解了一些公式与原理，</description>
    </item>
    
    <item>
      <title>算法总结4—支持向量机</title>
      <link>http://blog.sword865.com/archives/18/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/18/</guid>
      <description>支持向量机&amp;hellip;&amp;hellip;复杂的东西，书里讲得也不怎么详细，起码具体算法没有说&amp;hellip;&amp;hellip;所以又去查了些</description>
    </item>
    
    <item>
      <title>算法总结3—神经网络</title>
      <link>http://blog.sword865.com/archives/19/</link>
      <pubDate>Mon, 07 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/19/</guid>
      <description>生物神经网络： &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在生物的神经网络中的基本单位是神经元，神经元与神经元之间是由突触的相互联系来传递信息的，在静止息状态时，神经元的膜的内外电压</description>
    </item>
    
    <item>
      <title>算法总结2—决策树分类器</title>
      <link>http://blog.sword865.com/archives/20/</link>
      <pubDate>Sun, 06 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/20/</guid>
      <description>数学基础： 树：树是一种数据结构，它是由n（n&amp;gt;=1）个有限结点组成一个具有层次关系的集合。把它叫做&amp;ldquo;树&amp;rdquo;是因为</description>
    </item>
    
    <item>
      <title>算法总结1—贝叶斯分类器</title>
      <link>http://blog.sword865.com/archives/21/</link>
      <pubDate>Sat, 05 Sep 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/21/</guid>
      <description>&amp;nbsp;这几天以很快的速度翻完了&amp;lt;集体智慧编程&amp;gt;,因为只是对里面的算法感兴趣,对那些web2.0的应用没什么感觉,所以很多地</description>
    </item>
    
    <item>
      <title>读《你的灯亮这么》—走出问题的乌托邦</title>
      <link>http://blog.sword865.com/archives/22/</link>
      <pubDate>Tue, 25 Aug 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/22/</guid>
      <description>军训期间闲着无聊时,决定读一些&amp;ldquo;杂书&amp;rdquo;，其中有一本叫《你的灯亮着么?》的小册子，刚读完不久，趁着今晚休息的时间作以记</description>
    </item>
    
    <item>
      <title>ACM暑假集训总结</title>
      <link>http://blog.sword865.com/archives/23/</link>
      <pubDate>Wed, 19 Aug 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/23/</guid>
      <description>ACM的暑假集训结束了，趁着军训还没开始，对整个暑假接触到的东西作了一个总结，因为刚参加ACM不久，所以内容大都比较基础吧，文章中提到了些参</description>
    </item>
    
    <item>
      <title>有重复组合数</title>
      <link>http://blog.sword865.com/archives/24/</link>
      <pubDate>Thu, 02 Apr 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/24/</guid>
      <description>从n个元素中有重复地取r个，不计顺序，则不同的取法有多少种？ 这个问题的答案被称为有重复组合数。结果很简洁，是C(n+r-1,r)。(注：这表</description>
    </item>
    
    <item>
      <title>编译原理虎书java版本–Chapter 2-3</title>
      <link>http://blog.sword865.com/archives/25/</link>
      <pubDate>Sat, 14 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/25/</guid>
      <description>options {
JAVA_UNICODE_ESCAPE = true;
}
PARSER_BEGIN(MiniJavaParser)
public class MiniJavaParser {}
PARSER_END(MiniJavaParser)
// Insert a specification of a lexical analysis here.
TOKEN :
{
&amp;lt; LPAREN: &amp;#8220;(&amp;#8221; &amp;gt;
| &amp;lt; RPAREN: &amp;#8220;)&amp;#8221; &amp;gt;
| &amp;lt; LSQPAREN: &amp;#8220;[&amp;#8221; &amp;gt;
| &amp;lt; RSQPAREN: &amp;#8220;]&amp;#8221; &amp;gt;
| &amp;lt; LBRACE: &amp;#8220;{&amp;#8221; &amp;gt;
| &amp;lt; RBRACE: &amp;#8220;}&amp;#8221; &amp;gt;
| &amp;lt; DOT: &amp;#8220;.&amp;#8221; &amp;gt;
| &amp;lt; ASSIGN: &amp;#8220;=&amp;#8221; &amp;gt;
| &amp;lt; LT: &amp;#8220;&amp;lt;&amp;#8221; &amp;gt;
| &amp;lt; PLUS: &amp;#8220;+&amp;#8221; &amp;gt;</description>
    </item>
    
    <item>
      <title>KMP算法复杂度分析</title>
      <link>http://blog.sword865.com/archives/26/</link>
      <pubDate>Wed, 11 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/26/</guid>
      <description>KMP算法也算接触很久了，今天却突然发现不知道那个的复杂度是怎么来的 于是想啊想，查啊查，总结如下 设代码为 s=0; for(i=1;i&amp;lt;=m,i++){ while(s&amp;gt;0&amp;amp;&amp;amp;a[i]!=b[s+1])s=next(s) if(a[i]==b[s+1])s++; if(s==n) return (i-n) 分析的关键是那个whi</description>
    </item>
    
    <item>
      <title>终于还是开了个blog。。。</title>
      <link>http://blog.sword865.com/archives/27/</link>
      <pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/27/</guid>
      <description>RT 以后常来看看吧</description>
    </item>
    
    <item>
      <title>编译原理虎书java版本–Chapter 1</title>
      <link>http://blog.sword865.com/archives/28/</link>
      <pubDate>Sun, 08 Mar 2009 00:00:00 +0000</pubDate>
      <author>sword865@163.com (罗刹剑客)</author>
      <guid>http://blog.sword865.com/archives/28/</guid>
      <description>Count.java
public class Count
{
int resolveStm(Stm stm){
int temp1=0,temp2=0;
if(stm.kind==1){
temp1=resolveStm(((CompoundStm)stm).stm1);
temp2=resolveStm(((CompoundStm)stm).stm2);
return temp1&amp;gt;temp2? temp1:temp2;
}else if(stm.kind==2){
return resolveExp(((AssignStm)stm).exp);
}else if (stm.kind==3){
return countExpInExpList(((PrintStm)stm).exps);
}else{
return 0;
}
}
int countExpInExpList(ExpList expList){
if(expList.kind==1){
return 1;
}else if(expList.kind==2){
return 1+countExpInExpList(((PairExpList)expList).tail);
}else{
return 0;
}
}
int resolveExp(Exp exp){
int temp1,temp2;
if(exp.kind==1){
return 0;
}else if(exp.kind==2){
return 0;
}else if(exp.kind==3){
temp1 = resolveExp(((OpExp)exp).left);
temp2 = resolveExp(((OpExp)exp).right);
return temp1&amp;gt;temp2?temp1:temp2;
}else if(exp.kind==4){
temp1=resolveStm(((EseqExp)exp).stm);</description>
    </item>
    
  </channel>
</rss>